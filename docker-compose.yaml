version: '3.9'

services:

  postgresql:
    image: bitnami/postgresql:17.2.0
    environment:
      POSTGRES_PASSWORD: "31695d7b59ea0665ee62"
    volumes:
      - pgdata:/bitnami/postgresql
    networks:
      openreplay-net:
        aliases:
          - postgresql.db.svc.cluster.local
    deploy:
      restart_policy:
        condition: on-failure

  clickhouse:
    image: clickhouse/clickhouse-server:25.1-alpine
    volumes:
      - clickhouse:/var/lib/clickhouse
    networks:
      openreplay-net:
        aliases:
          - clickhouse-openreplay-clickhouse.db.svc.cluster.local
    environment:
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: "1"
    deploy:
      restart_policy:
        condition: on-failure

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    networks:
      openreplay-net:
        aliases:
          - redis-master.db.svc.cluster.local
    deploy:
      restart_policy:
        condition: on-failure

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    volumes:
      - miniodata:/data
    networks:
      openreplay-net:
        aliases:
          - minio.db.svc.cluster.local
    ports:
      - target: 9001
        published: 9001
        protocol: tcp
        mode: host
    environment:
      MINIO_ROOT_USER: ${COMMON_S3_KEY}
      MINIO_ROOT_PASSWORD: ${COMMON_S3_SECRET}
    deploy:
      restart_policy:
        condition: on-failure

  # ===== MIGRATIONS =====

  db-migration:
    image: bitnami/postgresql:14.5.0
    depends_on:
      - postgresql
      - minio
    networks:
      - openreplay-net
    volumes:
      - ../schema/db/init_dbs/postgresql/init_schema.sql:/tmp/init_schema.sql
    environment:
      PGHOST: postgresql
      PGPORT: 5432
      PGDATABASE: postgres
      PGUSER: postgres
      PGPASSWORD: 31695d7b59ea0665ee62
    entrypoint: >
      sh -c "until pg_isready -h postgresql -p 5432; do
        echo 'Postgres not ready, waiting...'; sleep 1;
      done;
      psql -h postgresql -U postgres -d postgres -f /tmp/init_schema.sql"
    deploy:
      restart_policy:
        condition: on-failure

  clickhouse-migration:
    image: clickhouse/clickhouse-client:25.1-alpine
    depends_on:
      - clickhouse
      - minio
    networks:
      - openreplay-net
    volumes:
      - ../schema/db/init_dbs/clickhouse/create/init_schema.sql:/tmp/init_schema.sql
    entrypoint: >
      sh -c "until nc -z clickhouse-openreplay-clickhouse.db.svc.cluster.local 9000; do
        echo 'Waiting for Clickhouse...'; sleep 1;
      done;
      clickhouse-client -h clickhouse-openreplay-clickhouse.db.svc.cluster.local --multiquery < /tmp/init_schema.sql || true"
    deploy:
      restart_policy:
        condition: on-failure

  alerts-openreplay:
    image: public.ecr.aws/p1t3u8a3/alerts:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - alerts-openreplay
          - alerts-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/alerts.env
    deploy:
      restart_policy:
        condition: any

  analytics-openreplay:
    image: public.ecr.aws/p1t3u8a3/analytics:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - analytics-openreplay
          - analytics-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/analytics.env
    deploy:
      restart_policy:
        condition: any

  http-openreplay:
    image: public.ecr.aws/p1t3u8a3/http:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - http-openreplay
          - http-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/http.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any

  
  
  images-openreplay:
    image: public.ecr.aws/p1t3u8a3/images:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - images-openreplay
          - images-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/images.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  integrations-openreplay:
    image: public.ecr.aws/p1t3u8a3/integrations:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - integrations-openreplay
          - integrations-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/integrations.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  sink-openreplay:
    image: public.ecr.aws/p1t3u8a3/sink:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - sink-openreplay
          - sink-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/sink.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  sourcemapreader-openreplay:
    image: public.ecr.aws/p1t3u8a3/sourcemapreader:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - sourcemapreader-openreplay
          - sourcemapreader-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/sourcemapreader.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  spot-openreplay:
    image: public.ecr.aws/p1t3u8a3/spot:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - spot-openreplay
          - spot-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/spot.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  storage-openreplay:
    image: public.ecr.aws/p1t3u8a3/storage:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - storage-openreplay
          - storage-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/storage.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  assets-openreplay:
    image: public.ecr.aws/p1t3u8a3/assets:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - assets-openreplay
          - assets-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/assets.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  assist-openreplay:
    image: public.ecr.aws/p1t3u8a3/assist:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - assist-openreplay
          - assist-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/assist.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  canvases-openreplay:
    image: public.ecr.aws/p1t3u8a3/canvases:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - canvases-openreplay
          - canvases-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/canvases.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  chalice-openreplay:
    image: public.ecr.aws/p1t3u8a3/chalice:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - chalice-openreplay
          - chalice-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/chalice.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any    
  
  db-openreplay:
    image: public.ecr.aws/p1t3u8a3/db:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - db-openreplay
          - db-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/db.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  ender-openreplay:
    image: public.ecr.aws/p1t3u8a3/ender:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - ender-openreplay
          - ender-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/ender.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  frontend-openreplay:
    image: public.ecr.aws/p1t3u8a3/frontend:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - frontend-openreplay
          - frontend-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/frontend.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any
  
  
  heuristics-openreplay:
    image: public.ecr.aws/p1t3u8a3/heuristics:v1.22.0
    networks:
      openreplay-net:
        aliases:
          - heuristics-openreplay
          - heuristics-openreplay.app.svc.cluster.local
    volumes:
      - shared-volume:/mnt/efs
    env_file:
      - docker-envs/heuristics.env
    environment: {}  # Fallback empty environment if env_file is missing
    deploy:
      restart_policy:
        condition: any

  nginx-openreplay:
    image: nginx:latest
    networks:
      - openreplay-net
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    deploy:
      restart_policy:
        condition: any

  caddy:
    image: caddy:latest
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - openreplay-net
    environment:
      - ACME_AGREE=true
      - CADDY_DOMAIN=open.eltech.cloud
    deploy:
      restart_policy:
        condition: any

volumes:
  pgdata:
  clickhouse:
  redisdata:
  miniodata:
  shared-volume:
  caddy_data:
  caddy_config:

networks:
  openreplay-net:
    driver: overlay
